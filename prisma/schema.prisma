// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model JobApplication {
  id               Int           @id @default(autoincrement())
  jobTitle         String
  company          String
  location         String
  jobDescription   String
  position         String
  workMode         WorkMode // Remote/Onsite/Hybrid
  experienceMin    Int
  experienceMax    Int
  salaryMin        Int? // Optional if dontPreferSalary is true
  salaryMax        Int? // Optional if dontPreferSalary is true
  dontPreferSalary Boolean       @default(false)
  questions        JobQuestion[]
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  applicants       Applicant[]
}

// enum for work mode
enum WorkMode {
  REMOTE
  ONSITE
  HYBRID
}

model JobQuestion {
  id               Int            @id @default(autoincrement())
  question         String         @db.Text
  orderIndex       Int
  jobApplication   JobApplication @relation(fields: [jobApplicationId], references: [id], onDelete: Cascade)
  jobApplicationId Int
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  @@index([jobApplicationId])
}

model Applicant {
  id                   Int            @id @default(autoincrement())
  firstName            String
  lastName             String
  email                String
  resumeUrl            String
  currentSalary        Int?
  receiveNotifications Boolean
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  jobApplication       JobApplication @relation(fields: [jobApplicationId], references: [id])
  jobApplicationId     Int
  resume               Resume? // One-to-one relation
}

model Resume {
  id                  Int       @id @default(autoincrement())
  personalInformation Json?
  technicalSkills     String[]
  softSkills          String[]
  workExperience      Json[]
  education           Json[]
  certifications      Json[]
  projects            Json[]
  achievements        String[]
  languages           Json[]
  locationInfo        Json?
  availability        Json?
  publications        Json[]
  volunteerWork       String?
  score               Float?
  justification       String?
  applicantId         Int       @unique // Added applicantId with unique constraint
  applicant           Applicant @relation(fields: [applicantId], references: [id])
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  @@index([applicantId])
}
