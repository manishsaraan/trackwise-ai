// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model JobApplication {
  id               Int           @id @default(autoincrement())
  jobTitle         String
  company          Company       @relation(fields: [companyId], references: [id])
  companyId        Int
  location         String
  jobDescription   String
  position         String
  workMode         WorkMode
  experienceMin    Int
  experienceMax    Int
  salaryMin        Int?
  salaryMax        Int?
  dontPreferSalary Boolean       @default(false)
  questions        JobQuestion[]
  applicants       Applicant[]
  totalApplicants  Int           @default(0)
  acceptedCount    Int           @default(0)
  rejectedCount    Int           @default(0)
  inReviewCount    Int           @default(0)
  status           JobStatus     @default(ACTIVE)
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  @@index([status])
  @@index([companyId])
}

enum WorkMode {
  REMOTE
  ONSITE
  HYBRID
}

enum JobStatus {
  ACTIVE
  PENDING
  CLOSED
}

enum ApplicantStatus {
  PENDING
  IN_REVIEW
  ACCEPTED
  REJECTED
}

model JobQuestion {
  id               Int              @id @default(autoincrement())
  question         String           @db.Text
  orderIndex       Int
  answers          QuestionAnswer[]
  jobApplication   JobApplication   @relation(fields: [jobApplicationId], references: [id], onDelete: Cascade)
  jobApplicationId Int
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  @@index([jobApplicationId])
}

model Applicant {
  id                   Int              @id @default(autoincrement())
  firstName            String
  lastName             String
  email                String
  phone                String
  resumeUrl            String
  explanation          String?
  currentSalary        Int
  receiveNotifications Boolean          @default(false)
  status               ApplicantStatus  @default(PENDING)
  statusUpdatedAt      DateTime?
  answers              QuestionAnswer[]
  jobApplication       JobApplication   @relation(fields: [jobApplicationId], references: [id])
  jobApplicationId     Int
  resumeData           Json?
  aiProcessed          Boolean          @default(false)
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt

  @@index([jobApplicationId])
  @@index([status])
}

model QuestionAnswer {
  id          Int         @id @default(autoincrement())
  answer      String      @db.Text
  question    JobQuestion @relation(fields: [questionId], references: [id])
  questionId  Int
  applicant   Applicant   @relation(fields: [applicantId], references: [id], onDelete: Cascade)
  applicantId Int
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([questionId])
  @@index([applicantId])
}

model User {
  id                   String   @id @default(uuid())
  displayName          String
  primaryEmail         String   @unique
  primaryEmailVerified Boolean  @default(false)
  profileImageUrl      String?  @db.Text
  signedUpAt           DateTime @default(now())
  oauthProviders       Json[] // Will store array of provider objects
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}

model Company {
  id          Int              @id @default(autoincrement())
  companyName String
  description String           @db.Text
  companySize String
  foundedYear Int
  city        String
  country     String
  website     String?
  linkedIn    String?
  logo        String?
  jobs        JobApplication[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@index([companyName])
}
